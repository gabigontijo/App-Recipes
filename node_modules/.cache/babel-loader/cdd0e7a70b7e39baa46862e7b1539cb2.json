{"ast":null,"code":"var _jsxFileName = \"/home/gabriela/Documents/Trybe/Projetos/sd-025-a-project-recipes-app/src/components/IngredientsProgress.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport '../style/IngredientsInProgress.css';\nimport { useLocation } from 'react-router-dom';\nimport { getLocalStorage, saveRecipeInProgressLocalStorage } from '../service/LocalStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function IngredientProgress(props) {\n  _s();\n\n  const {\n    recipeType\n  } = props;\n  const location = useLocation();\n  const adressType = location.pathname.split('/')[1];\n\n  const handleCheckbox = _ref => {\n    let {\n      target\n    } = _ref;\n\n    if (target.checked && adressType === 'meals') {\n      target.parentElement.className = 'radio-ckecked';\n      const id = getLocalStorage('inProgressRecipes'); // if (id !== null) {\n      //   console.log('teste');\n      //   const recipe = { ...id.meals, meals: { ...id.meals } };\n\n      saveRecipeInProgressLocalStorage(recipe); // }\n      // if (id === null) {\n      //   const recipe = { meals: {} };\n      //   saveRecipeInProgressLocalStorage(recipe);\n      // }\n    }\n\n    if (!target.checked) {\n      target.parentElement.className = '';\n    }\n  };\n\n  function renderIngredients(param1) {\n    const asArray = Object.entries(recipeType);\n    const filtered = asArray.filter(_ref2 => {\n      let [key, value] = _ref2;\n      return key.includes(param1) && value !== null && value !== '';\n    });\n    const ingredients = filtered.map(el => el[1]);\n    return ingredients;\n  }\n\n  const ingredientsName = renderIngredients('Ingredient');\n  const IngredientsQuantity = renderIngredients('Measure');\n\n  const juntaArrays = () => {\n    const newArray = [];\n\n    for (let index = 0; index < ingredientsName.length; index += 1) {\n      newArray.push(`${IngredientsQuantity[index]} ${ingredientsName[index]}`);\n    }\n\n    return newArray;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: juntaArrays().map((ingred, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n      \"data-testid\": `${index}-ingredient-step`,\n      htmlFor: ingred,\n      children: [ingred, ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        name: ingred,\n        id: ingred,\n        onChange: handleCheckbox\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), ' ']\n    }, ingred, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(IngredientProgress, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n\n_c = IngredientProgress;\nIngredientProgress.propTypes = {\n  recipeType: PropTypes.shape({}).isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"IngredientProgress\");","map":{"version":3,"names":["React","PropTypes","useLocation","getLocalStorage","saveRecipeInProgressLocalStorage","IngredientProgress","props","recipeType","location","adressType","pathname","split","handleCheckbox","target","checked","parentElement","className","id","recipe","renderIngredients","param1","asArray","Object","entries","filtered","filter","key","value","includes","ingredients","map","el","ingredientsName","IngredientsQuantity","juntaArrays","newArray","index","length","push","ingred","propTypes","shape","isRequired"],"sources":["/home/gabriela/Documents/Trybe/Projetos/sd-025-a-project-recipes-app/src/components/IngredientsProgress.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../style/IngredientsInProgress.css';\nimport { useLocation } from 'react-router-dom';\nimport { getLocalStorage,\n  saveRecipeInProgressLocalStorage } from '../service/LocalStorage';\n\nexport default function IngredientProgress(props) {\n  const { recipeType } = props;\n  const location = useLocation();\n  const adressType = location.pathname.split('/')[1];\n\n  const handleCheckbox = ({ target }) => {\n    if (target.checked && adressType === 'meals') {\n      target.parentElement.className = 'radio-ckecked';\n      const id = getLocalStorage('inProgressRecipes');\n      // if (id !== null) {\n      //   console.log('teste');\n      //   const recipe = { ...id.meals, meals: { ...id.meals } };\n        saveRecipeInProgressLocalStorage(recipe);\n      // }\n      // if (id === null) {\n      //   const recipe = { meals: {} };\n      //   saveRecipeInProgressLocalStorage(recipe);\n      // }\n    }\n    if (!target.checked) {\n      target.parentElement.className = '';\n    }\n  };\n\n  function renderIngredients(param1) {\n    const asArray = Object.entries(recipeType);\n    const filtered = asArray.filter(([key, value]) => key.includes(param1)\n    && value !== null && value !== '');\n    const ingredients = filtered.map((el) => el[1]);\n    return ingredients;\n  }\n\n  const ingredientsName = renderIngredients('Ingredient');\n  const IngredientsQuantity = renderIngredients('Measure');\n\n  const juntaArrays = () => {\n    const newArray = [];\n    for (let index = 0; index < ingredientsName.length; index += 1) {\n      newArray.push(`${IngredientsQuantity[index]} ${ingredientsName[index]}`);\n    }\n    return newArray;\n  };\n  return (\n    <div>\n      {juntaArrays().map((ingred, index) => (\n        <label\n          key={ ingred }\n          data-testid={ `${index}-ingredient-step` }\n          htmlFor={ ingred }\n        >\n          {ingred}\n          {' '}\n          <input\n            type=\"checkbox\"\n            name={ ingred }\n            id={ ingred }\n            onChange={ handleCheckbox }\n          />\n          {' '}\n\n        </label>))}\n\n    </div>\n  );\n}\n\nIngredientProgress.propTypes = {\n  recipeType: PropTypes.shape({\n  }).isRequired,\n};\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,oCAAP;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,eAAT,EACEC,gCADF,QAC0C,yBAD1C;;AAGA,eAAe,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;EAAA;;EAChD,MAAM;IAAEC;EAAF,IAAiBD,KAAvB;EACA,MAAME,QAAQ,GAAGN,WAAW,EAA5B;EACA,MAAMO,UAAU,GAAGD,QAAQ,CAACE,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6B,CAA7B,CAAnB;;EAEA,MAAMC,cAAc,GAAG,QAAgB;IAAA,IAAf;MAAEC;IAAF,CAAe;;IACrC,IAAIA,MAAM,CAACC,OAAP,IAAkBL,UAAU,KAAK,OAArC,EAA8C;MAC5CI,MAAM,CAACE,aAAP,CAAqBC,SAArB,GAAiC,eAAjC;MACA,MAAMC,EAAE,GAAGd,eAAe,CAAC,mBAAD,CAA1B,CAF4C,CAG5C;MACA;MACA;;MACEC,gCAAgC,CAACc,MAAD,CAAhC,CAN0C,CAO5C;MACA;MACA;MACA;MACA;IACD;;IACD,IAAI,CAACL,MAAM,CAACC,OAAZ,EAAqB;MACnBD,MAAM,CAACE,aAAP,CAAqBC,SAArB,GAAiC,EAAjC;IACD;EACF,CAjBD;;EAmBA,SAASG,iBAAT,CAA2BC,MAA3B,EAAmC;IACjC,MAAMC,OAAO,GAAGC,MAAM,CAACC,OAAP,CAAehB,UAAf,CAAhB;IACA,MAAMiB,QAAQ,GAAGH,OAAO,CAACI,MAAR,CAAe;MAAA,IAAC,CAACC,GAAD,EAAMC,KAAN,CAAD;MAAA,OAAkBD,GAAG,CAACE,QAAJ,CAAaR,MAAb,KAC/CO,KAAK,KAAK,IADqC,IAC7BA,KAAK,KAAK,EADC;IAAA,CAAf,CAAjB;IAEA,MAAME,WAAW,GAAGL,QAAQ,CAACM,GAAT,CAAcC,EAAD,IAAQA,EAAE,CAAC,CAAD,CAAvB,CAApB;IACA,OAAOF,WAAP;EACD;;EAED,MAAMG,eAAe,GAAGb,iBAAiB,CAAC,YAAD,CAAzC;EACA,MAAMc,mBAAmB,GAAGd,iBAAiB,CAAC,SAAD,CAA7C;;EAEA,MAAMe,WAAW,GAAG,MAAM;IACxB,MAAMC,QAAQ,GAAG,EAAjB;;IACA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGJ,eAAe,CAACK,MAA5C,EAAoDD,KAAK,IAAI,CAA7D,EAAgE;MAC9DD,QAAQ,CAACG,IAAT,CAAe,GAAEL,mBAAmB,CAACG,KAAD,CAAQ,IAAGJ,eAAe,CAACI,KAAD,CAAQ,EAAtE;IACD;;IACD,OAAOD,QAAP;EACD,CAND;;EAOA,oBACE;IAAA,UACGD,WAAW,GAAGJ,GAAd,CAAkB,CAACS,MAAD,EAASH,KAAT,kBACjB;MAEE,eAAe,GAAEA,KAAM,kBAFzB;MAGE,OAAO,EAAGG,MAHZ;MAAA,WAKGA,MALH,EAMG,GANH,eAOE;QACE,IAAI,EAAC,UADP;QAEE,IAAI,EAAGA,MAFT;QAGE,EAAE,EAAGA,MAHP;QAIE,QAAQ,EAAG3B;MAJb;QAAA;QAAA;QAAA;MAAA,QAPF,EAaG,GAbH;IAAA,GACQ2B,MADR;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAsBD;;GAhEuBlC,kB;UAELH,W;;;KAFKG,kB;AAkExBA,kBAAkB,CAACmC,SAAnB,GAA+B;EAC7BjC,UAAU,EAAEN,SAAS,CAACwC,KAAV,CAAgB,EAAhB,EACTC;AAF0B,CAA/B"},"metadata":{},"sourceType":"module"}